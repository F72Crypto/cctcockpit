import {
    makeApiRequest,
    generateSymbol,
    parseFullSymbol,
} from './helpers.js';
import {
    subscribeOnStream,
    unsubscribeFromStream,
} from './streaming.js';

const lastBarsCache = new Map();

// DatafeedConfiguration implementation
const configurationData = {
	// Represents the resolutions for bars supported by your datafeed
    	supported_resolutions: ['1', '3', '5', '15', '30', '60', '120', '240', '360', '480', '720', '1D', '3D', '5D', '1W', '2W', '1M'],
	
	// The `exchanges` arguments are used for the `searchSymbols` method if a user selects the exchange
	exchanges: [ 
      {
		value: '',
		name: '',
		desc: '',
	},{
		value: 'bybit',
		name: 'Bybit',
		desc: 'Bybit',
	},{
		value: 'Binance',
		name: 'Binance',
		desc: 'Binance',
	},{
		value: 'Bitfinex',
		name: 'Bitfinex',
		desc: 'Bitfinex',
	},{
		value: 'Kraken',// Filter name
		name: 'Kraken',	// Full exchange name displayed in the filter popup
		desc: 'Kraken',     
	},
	],
	// The `symbols_types` arguments are used for the `searchSymbols` method if a user selects this symbol type
	symbols_types: [
      {
		name: 'Crypto',
		value: 'Crypto',
	},{
		name: 'NFTs',
		value: 'NFTs',
	},{
		name: 'Futures',
		value: 'Futures',
	},{
		name: 'Fan Tokens',
		value: 'Fan Tokens',
	},{
		name: 'Memes',
		value: 'Memes',
	},
	],
};

////////////////////////////////////////////////////////////////////////

// Obtains all symbols for all exchanges supported by CryptoCompare API
async function getAllSymbols() {
    const data = await makeApiRequest('data/v3/all/exchanges');
    let allSymbols = [];

    for (const exchange of configurationData.exchanges) {
        // Verificar se data.Data[exchange.value] existe antes de tentar acessar a propriedade 'pairs'
        if (data.Data[exchange.value]) {
            const pairs = data.Data[exchange.value].pairs;

            for (const leftPairPart of Object.keys(pairs)) {
                const symbols = pairs[leftPairPart].map(rightPairPart => {
                    const symbol = generateSymbol(exchange.value, leftPairPart, rightPairPart);
                    return {
                        symbol: symbol.short,
                        full_name: symbol.full,
                        description: symbol.short,
                        exchange: exchange.value,
                      	exchange_logo: `https://s3-symbol-logo.tradingview.com/provider/${exchange.value.toLowerCase()}.svg`,
                        type: 'crypto',
                      	logo_urls: [
                        `https://assets.coincap.io/assets/icons/${leftPairPart.toLowerCase()}@2x.png`, 
                        `https://assets.coincap.io/assets/icons/${rightPairPart.toLowerCase()}@2x.png`
                    ]
                    };
                });
                allSymbols = [...allSymbols, ...symbols];
            }
        } else {
            console.log(`Exchange ${exchange.value} not found in data.`);
        }
    }
    // Sort all symbols alphabetically
    allSymbols.sort((a, b) => a.full_name.localeCompare(b.full_name));

    return allSymbols;
}


// FIM
export default {
	onReady: (callback) => {
		console.log('[onReady]: Method call');
		setTimeout(() => callback(configurationData));
	},

searchSymbols: async (
	userInput,
	exchange,
	symbolType,
	onResultReadyCallback,
) => {
	console.log('[searchSymbols]: Method call');
	const symbols = await getAllSymbols();
	const newSymbols = symbols.filter(symbol => {
		const isExchangeValid = exchange === '' || symbol.exchange === exchange;
		const isSymbolTypeValid = symbolType === '' || symbol.type === symbolType;
		const isFullSymbolContainsInput = symbol.full_name
			.toLowerCase()
			.indexOf(userInput.toLowerCase()) !== -1;
		return isExchangeValid && isFullSymbolContainsInput && isSymbolTypeValid;
	});
	onResultReadyCallback(newSymbols);
},



	resolveSymbol: async (
		symbolName,
		onSymbolResolvedCallback,
		onResolveErrorCallback,
		extension
	) => {
		console.log('[resolveSymbol]: Method call', symbolName);
		const symbols = await getAllSymbols();
		const symbolItem = symbols.find(({
			full_name,
		}) => full_name === symbolName);
		if (!symbolItem) {
			console.log('[resolveSymbol]: Cannot resolve symbol', symbolName);
			onResolveErrorCallback('cannot resolve symbol');
			return;
		}
		// Symbol information object
		const symbolInfo = {
			ticker: symbolItem.full_name,
			name: symbolItem.symbol,
			description: symbolItem.description,
			type: symbolItem.type,
			show_symbol_logos: true,
         	show_exchange_logos: true,
			exchange: symbolItem.exchange,
			pricescale: 100,
			visible_plots_set: true,
			supported_resolutions: configurationData.supported_resolutions,
			session: '24x7',
			timezone: 'Etc/UTC',
			minmov: 1,
			has_intraday: true,
			intraday_multipliers: ['1', '60'],
			volume_precision: 8,
			data_status: 'streaming',
		};

		console.log('[resolveSymbol]: Symbol resolved', symbolName);
		onSymbolResolvedCallback(symbolInfo);
	},

getBars: async (symbolInfo, resolution, periodParams, onHistoryCallback, onErrorCallback) => {
    console.log('[getBars]: Called with resolution', resolution)
    const { from, to, firstDataRequest } = periodParams;
    console.log('[getBars]: periodParams', periodParams);    
    console.log('[getBars]: Method call', symbolInfo, resolution, from, to);
    const parsedSymbol = parseFullSymbol(symbolInfo.full_name);
    console.log('[getBars]: parsedSymbol', parsedSymbol);    
    const urlParameters = {
        fsym: parsedSymbol.fromSymbol,
        tsym: parsedSymbol.toSymbol,
        toTs: to,
        limit: 2000,
    };
    const query = Object.keys(urlParameters)
        .map(name => `${name}=${encodeURIComponent(urlParameters[name])}`)
        .join('&');

let urlPath;
if (resolution.includes('D') || resolution.includes('W') || resolution.includes('M')) {
    urlPath = 'histoday';
} else if (parseInt(resolution, 10) < 60) {
    urlPath = 'histominute';
} else {
    urlPath = 'histohour';
}
    console.log('[getBars]: urlPath', urlPath);
    console.log(`[getBars]: Making request to ${urlPath}?${query}`);

    try {
        const data = await makeApiRequest(`data/v2/${urlPath}?${query}`);
        console.log('[getBars]: Received data', data);

        if (data.Response && data.Response === 'Error' || data.Data.Data.length === 0) {
            console.warn(`[getBars]: No data returned from API for resolution ${resolution}`);
            onHistoryCallback([], {
                noData: true,
            });
            return;
        }
			let bars = [];
			data.Data.Data.forEach(bar => {
				if (bar.time >= from && bar.time < to) {
					bars = [...bars, {
						time: bar.time * 1000,
						low: bar.low,
						high: bar.high,
						open: bar.open,
						close: bar.close,
					}];
				}
			});
			if (firstDataRequest) {
				lastBarsCache.set(symbolInfo.full_name, {
					...bars[bars.length - 1],
				});
			}
			console.log(`[getBars]: returned ${bars.length} bar(s)`);
			onHistoryCallback(bars, {
				noData: false,
			});
		} catch (error) {
			console.log('[getBars]: Get error', error);
			onErrorCallback(error);
		}
	},
/////////////////////////////////////////////////////////////////////////
subscribeBars: (
    symbolInfo,
    resolution,
    onRealtimeCallback,
    subscriberUID,
    onResetCacheNeededCallback,
) => {
    console.log('[subscribeBars]: Method call with subscriberUID:', subscriberUID);
    let lastBarCache = lastBarsCache.get(symbolInfo.full_name);

    if (!lastBarCache) {
        lastBarCache = { time: 0, open: 0, high: 0, low: 0, close: 0, volume: 0 };
        lastBarsCache.set(symbolInfo.full_name, lastBarCache);
    }

    symbolInfo.lastBar = lastBarCache;
    subscribeOnStream(
        symbolInfo,
        resolution,
        onRealtimeCallback,
        subscriberUID,
        onResetCacheNeededCallback,
    );
    onRealtimeCallback(newBar);

    // Simulando a atualização de dados em tempo real com um intervalo
    const intervalId = setInterval(async () => {
        const parsedSymbol = parseFullSymbol(symbolInfo.full_name);
        const data = await makeApiRequest(`data/v2/histominute?fsym=${parsedSymbol.fromSymbol}&tsym=${parsedSymbol.toSymbol}&limit=1`);
        if (data && data.Data && data.Data.Data[0]) {
            const bar = data.Data.Data[0];
            if (bar.time * 1000 > lastBarCache.time) {
                lastBarCache = {
                    time: bar.time * 1000,
                    low: bar.low,
                    high: bar.high,
                    open: bar.open,
                    close: bar.close,
                    volume: bar.volumefrom,
                };
                lastBarsCache.set(symbolInfo.full_name, lastBarCache);
                onRealtimeCallback(lastBarCache);
            }
        }
    }, 1000 * 5); // atualiza a cada 5 segundos

    // Guardando o intervalId no objeto symbolInfo para podermos parar o intervalo posteriormente
    symbolInfo.intervalId = intervalId;
},

unsubscribeBars: (subscriberUID) => {
    console.log('[unsubscribeBars]: Method call with subscriberUID:', subscriberUID);
    unsubscribeFromStream(subscriberUID);
    const symbols = Array.from(lastBarsCache.keys());
    symbols.forEach(symbol => {
        const symbolInfo = lastBarsCache.get(symbol);
        if (symbolInfo.intervalId) {
            clearInterval(symbolInfo.intervalId);
        }
    });
},
};